openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/eyehol3/calendar1/1.0.0
info:
  description: This is a simple API
  version: "1.0.0"
  title: calendar api
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /evetns:
    get:
      tags:
        - events
      summary: all created events + events you participate in
      operationId: searchInventory
      description: |
      
      responses:
        '200':
          description: return events matching criteria, can be done by logged in user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: bad input parameter
      security:
        - calendar_auth:
            - read:events
  '/events/{eventId}':
    get:
      tags:
        - events
      summary: Find event by ID
      description: Returns a single event, can be done by logged in user
      operationId: getEventById
      parameters:
        - name: eventId
          in: path
          description: ID of event to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID supplied
        '404':
          description: event not found
      security:
        - calendar_auth:
            - read:events
    put:
      tags:
        - events
      summary: edits event, can link user to it
      operationId: editEvent
      parameters:
        - name: eventId
          in: path
          description: ID of event to return, can be done by logged in user
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Event'
      
      responses:
        '405':
          description: Invalid input
      security:
        - calendar_auth:
            - write:events
            - read:events

    
    post:
      tags:
        - events
      summary: adds event
      operationId: addEvent
      description: Adds an event to the system, can be done by logged in user
      parameters:
        - name: eventId
          in: path
          description: ID of event to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        $ref: '#/components/requestBodies/Event'
      security:
        - calendar_auth:
            - write:events
            - read:events
    delete:
      tags:
        - events
      summary: deletes event
      operationId: deleteEventById
      parameters:
        - name: eventId
          in: path
          description: ID of event to delete, can be done by logged in user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Event not found
      security:
        - calendar_auth:
            - write:events
            - read:events
            - delete:events
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/User'
        
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        $ref: '#/components/requestBodies/User'
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  
  
components:
  schemas:
    Event:
      type: object
      required:
        - id
        - name
        - date
        - description
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: my birthday
        date:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        description:
          type: string
          example: i was born yey
        created_by:
          $ref: '#/components/schemas/User'
        invited_users:
            type: array
            items:
              $ref: '#/components/schemas/Event'
    User:
      required:
        - name
      properties:
        name:
          type: string
          example: Nestor Ivaniushenko
        uid:
          type: string
          format: uuid
          example: fklsadj-asdjf-wfnf-8a0fi
      type: object
      
  requestBodies:
    Event:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Event'
        application/xml:
          schema:
            $ref: '#/components/schemas/Event'
      description: Event object that needs to be added to the calendar
      required: true
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/requestBodies/User'
      description: Created user object
      required: true
  securitySchemes:
    calendar_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://virtserver.swaggerhub.com/eyehol3/calendar1/1.0.0/oauth/dialog'
          scopes:
            write:events: modify events in your account
            read:events: read your events
            delete:events: delete your events